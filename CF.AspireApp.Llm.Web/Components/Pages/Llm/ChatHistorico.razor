@page "/chathistorico"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using System.Net.Http.Headers
@using System.Text
@using Microsoft.AspNetCore.Components
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using System.Text.Json

@inject TextStreamApiClient TextStreamApiClient

<PageTitle>Chat con LLM</PageTitle>

<div>
    <h1>Chat con LLM</h1>

    <div style="height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
        @foreach (var message in messages)
        {
            <ChatMessageContentComponent Message="@message" />
        }
    </div>

    <MessageInputComponent OnMessageSubmit="StartStream" IsStreaming="@isStreaming" />

    <LoadingSpinnerComponent IsVisible="@isStreaming" />
</div>

@code {
    private ChatHistory messages = new();
    private bool isStreaming = false;
    private CancellationTokenSource? cancellationTokenSource;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AddInitialMessage();
    }

    private void AddInitialMessage()
    {
        var initialMessage = "Bienvenido al chat con LLM. ¿En qué puedo ayudarte hoy?";
        messages.AddSystemMessage(initialMessage);
    }

    private async Task StartStream(string userInput)
    {
        isStreaming = true;
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            messages.AddUserMessage(userInput);

            // Crear una copia de los mensajes sin el último mensaje del usuario
            var messagesWithoutLast = new ChatHistory(messages.Take(messages.Count - 1).ToList());

            await TextStreamApiClient.StartTextStreamWithHistoryAsync(userInput, messagesWithoutLast, OnMessageReceivedAsync, cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            messages.AddSystemMessage("Stream canceled.");
        }
        finally
        {
            isStreaming = false;
        }

        StateHasChanged();
    }

    private void StopStream()
    {
        cancellationTokenSource?.Cancel();
    }

    private async Task OnMessageReceivedAsync(string message)
    {
        Console.WriteLine($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}] Mensaje recibido: {message}");
        await InvokeAsync(() =>
        {
            var lastMessage = messages.LastOrDefault();
            if (lastMessage != null && lastMessage.Role.ToString().ToUpper() == AuthorRole.Assistant.ToString().ToUpper())
            {
                lastMessage.Content += message;
            }
            else
            {
                messages.AddAssistantMessage(message);
            }
            StateHasChanged();
        });
    }
}

