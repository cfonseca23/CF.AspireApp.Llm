@page "/chat"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using System.Net.Http.Headers
@using System.Text
@using Microsoft.AspNetCore.Components
@inject TextStreamApiClient TextStreamApiClient

<PageTitle>Chat con LLM</PageTitle>

<div>
    <h1>Chat con LLM</h1>

    <div style="height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
        @foreach (var message in messages)
    {
        <ChatMessageComponent UserName="@message.UserName" Message="@message.Message" CreatedDate="@message.CreatedDate" />
    }
    </div>

    <MessageInputComponent OnMessageSubmit="StartStream" IsStreaming="@isStreaming" />

    <LoadingSpinnerComponent IsVisible="@isStreaming" />
</div>

@code {
private List<ChatMessage> messages = new();
private bool isStreaming = false;
private CancellationTokenSource? cancellationTokenSource;

private async Task StartStream(string userInput)
{
    messages.Clear();
    isStreaming = true;
    cancellationTokenSource = new CancellationTokenSource();

    try
    {
        await TextStreamApiClient.StartTextStreamAsync(userInput, OnMessageReceivedAsync, cancellationTokenSource.Token);
    }
    catch (OperationCanceledException)
    {
        messages.Add(new ChatMessage { UserName = "system", Message = "Stream canceled.", CreatedDate = DateTime.Now });
    }
    finally
    {
        isStreaming = false;
    }

    StateHasChanged();
}

private void StopStream()
{
    cancellationTokenSource?.Cancel();
}

private async Task OnMessageReceivedAsync(string message)
{
    Console.WriteLine($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}] Mensaje recibido: {message}");
    await InvokeAsync(() =>
    {
        var lastMessage = messages.LastOrDefault();
        if (lastMessage != null && lastMessage.UserName == "system")
        {
            lastMessage.Message += message;
        }
        else
        {
            messages.Add(new ChatMessage { UserName = "system", Message = message, CreatedDate = DateTime.Now });
        }
        StateHasChanged();
    });
}

private class ChatMessage
{
    public string UserName { get; set; } = string.Empty;
    public string Message { get; set; } = string.Empty;
    public DateTime CreatedDate { get; set; }
}
}